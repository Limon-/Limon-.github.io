<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift | Limon's Blog]]></title>
  <link href="http://limon-.github.io//blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://limon-.github.io//"/>
  <updated>2015-02-03T09:30:05+08:00</updated>
  <id>http://limon-.github.io//</id>
  <author>
    <name><![CDATA[Limon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift Cheat Sheet]]></title>
    <link href="http://limon-.github.io//blog/2015/01/26/swift-cheat-sheet/"/>
    <updated>2015-01-26T13:36:08+08:00</updated>
    <id>http://limon-.github.io//blog/2015/01/26/swift-cheat-sheet</id>
    <content type="html"><![CDATA[<h2>Tuples 元组</h2>

<p>元组，将多个不同的值集合成一个数据</p>

<ul>
<li>可有任意多个值</li>
<li>不同的值可有是不同类型</li>
</ul>


<h3>元组的定义</h3>

<pre><code>// 方式一
let loginResult = (true,"Limon","男")
let( isLogin, nickName, gender) = loginResult

// output: Limon
nickName 
loginResult.1

// 方式二
let loginResult = (isLogin:true, nickName:"Limon", gender:"男")

// 总结
let loginResult:(BOOL, String) = (isLogin:true, nickName:"Limon", gender:"男")
</code></pre>

<h3>忽略部分数值</h3>

<pre><code>let loginResult = (true,"Limon")
let (isLoginSuccess, _ ) = loginResult
if isLoginSuccess{
    println("登录成功")
}
</code></pre>

<h2>Optional 可选型</h2>

<p>Optional，或者是一个值，或者是没有值，没有值时为<code>nil</code></p>

<blockquote><p>在Swift中，纯量类型也可为<code>nil</code></p></blockquote>

<h3>Optional的定义</h3>

<pre><code>var inOptionalVariable:Int?  // 默认为nil

let nickName:String? = "Limon"
nickName   // output：{Some "Limon"}
nickName!  // output："Limon"  ----- 解包

let nickName:String! = "Limon" 
nickName   // output："Limon"
</code></pre>

<h3>Implicitly Unwrapped Optionals 隐式拆包的Optional</h3>

<p>在Swift中，必须彻底初始化，如果定义了一个变量，但不想在init()中进行初始化，怎么办？</p>

<p>Optional类型就派上用场了，</p>

<pre><code>var inOptionalVariable:Int?  // 默认为nil
</code></pre>

<p>但用<code>?</code>定义的Optional类型在用的时候有可能觉得不方便(详情见下面)，这时我们可用用<code>Implicitly Unwrapped Optionals</code>隐式拆包的Optional</p>

<pre><code>var str:String!
str.hashValue // 不用加?，但若str为空，则crash：found nil while unwrapping an Optional value
</code></pre>

<blockquote><p>隐式拆包的Optional，等于每次对这种类型的值操作时，都会自动在操作前补上一个!进行强制拆包，然后在执行后面的操作，当然如果该值是nil，会crash</p></blockquote>

<p>而利用<code>?</code>定义有三种访问方式：</p>

<ul>
<li>强制拆包</li>
<li>可选绑定</li>
<li><p>?访问,若str为空则不执行后续操作，若有值，则执行后续操作</p>

<pre><code>  var str:String?  // 注意这是一个Optional类型，而不是一个String类型        
  str.hashValue // error: 'String?' does not have a member named 'hashValue'

  // 1. 强制拆包
  str!.hashValue  // 如果str不为空则可用，若为空则crash：found nil while unwrapping an Optional value
  // 2. ?访问
  str?.hashValue
  // 3. 可选绑定
  if let str1 = str{
      str1.hashValue // str1一定不为空
  } 
</code></pre></li>
</ul>


<h4>！的两种应用场景</h4>

<ul>
<li>强制对Optional值进行拆包(unwrap)</li>
<li>声明Implicitly Unwrapped Optionals值</li>
</ul>


<h2>nil聚合运算符</h2>

<pre><code>a ?? b  -&gt;  a != nil ? a! :b
</code></pre>

<p>a必须是optional，b的类型与a!必须一致</p>

<h3>运用：</h3>

<pre><code>var nickName:String?
nickName = "Limon"

//let outputName:String = nickName != nil ? nickName! : "Guest"
let outputName:String = nickName ?? "Guest" // nickName不为空,则输出nickName的解包，否则输出Guest

println("Hello, " + outputName) 
</code></pre>

<h2>Range Operator 区间运算符</h2>

<p>Closed Range Opertor</p>

<p>闭区间<code>[a,b]</code> -> <code>a...b</code></p>

<p>Half-Closed Range Operator</p>

<p>前闭后开区间<code>[a,b)</code> -> <code>a..&lt;b</code></p>

<blockquote><p><code>..&lt;</code>更新与beta3</p></blockquote>

<h3>运用</h3>

<pre><code>for index in 1...10
{
    index
}

let infoArray = ["Limon", "18", "程序猿"]
for i in 0..&lt; infoArray.count
{
    infoArray[i]
}
</code></pre>

<h2>String和Character</h2>

<h3>基本运用</h3>

<pre><code>var str0 = String()  // 空字符串 var str0: String  也可以
var str = "Hello, playground"

// 遍历
for c in str
{
    println(c)
}

// 拼接
var ch:Character = "!"
str.append(ch)
str +=  "!!"

// 计算字符串长度
countElements(str)

// 字符串比较
let strA = "abc"
let strB = "abc"
let strC = "abd"
let strD = "abcd"

strA == strB
strA &lt; strC
strD &lt; strC // true，字典序

strA.hasPrefix("a")
strA.hasSuffix("c")
</code></pre>

<h3>Foundation类库的String方法</h3>

<pre><code>// 导入Foundation
import Foundation

var str = "Hello,playground"
// 首字母大写
str.capitalizedString
// 全部大写
str.uppercaseString
// 小写
str.lowercaseString


// 字符串截取 trim
var str2 = "   Hello!!!!   "
// 去除空格
str2.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceCharacterSet())
// 去除指定字符串，output：Hello
str2.stringByTrimmingCharactersInSet(NSCharacterSet(charactersInString: " !"))

// 字符串拆分 split
var str3 = "welcome to playground"
str3.componentsSeparatedByString(" ")

// 根据指定字符串拆分
str3 = "welcome to playground!Step-by-Step learn"
str3.componentsSeparatedByCharactersInSet(NSCharacterSet(charactersInString: " !-"))

// 合并字符串 join
var str4 = "-"
str4.join(["1","2","3"])
</code></pre>

<h3>String.Index和Range</h3>

<pre><code>// 搜索指定字符串
var str = "welcome to playground! Step-by-Step learn"
// 默认向前搜索
str.rangeOfString("Step")
// 从后向前搜索
str.rangeOfString("Step", options: NSStringCompareOptions.BackwardsSearch)
// 忽略大小写
str.rangeOfString("step", options: NSStringCompareOptions.CaseInsensitiveSearch)
</code></pre>

<h3>Range结构体</h3>

<pre><code>// "&lt; &gt;"内为数据的类型
let startIndex:String.Index = str.startIndex
let endIndex = advance(str.startIndex, 10)  // 此endIndex的类型是 String.Index
let searchRange = Range&lt;String.Index&gt;(start: startIndex, end: endIndex)

// 在searchRange中搜索
str.rangeOfString("Step", options: NSStringCompareOptions.CaseInsensitiveSearch, range: searchRange)

// 字符串截取 substring
var toIndex = advance(str.startIndex, 3)
str.substringToIndex(toIndex)  // output：wel
str.substringWithRange(...Range&lt;String.Index&gt;...)
</code></pre>

<h3>数组</h3>

<p><code>var array = ["A","B","C"]</code></p>

<ul>
<li>不同于OC，Swift中，数组只能存同一种类型的数据，不能存字符串，又存整数</li>
<li>所存的数据不一定是一个类的对象，可以是基础数据类型（在OC中，想存int，只能转化为NSNumber）</li>
</ul>


<blockquote><p>第一点不知道对不对，<code>var array = ["A",2,"C"]</code>这样不报错，不过类型变成了<code>NSObject</code></p></blockquote>

<h4>数组的定义</h4>

<pre><code>var array = ["A","B","C"]
var array2:[String] = ["A","B","C"]
var array3:Array&lt;String&gt; = ["A","B","C"]    

// 空数组
var emptyArray = [Int]()    // var str = String()  空字符串
var emptyArray2 = Array&lt;String&gt;()

// 清空数组
array2 = [] 
array3 = [String]()

let numericArray = Array(count: 3, repeatedValue: 42)
// numericArray is [42, 42, 42]
</code></pre>

<h4>数组的基本运用</h4>

<pre><code>// 合并
var array = [0, 1, 2, 3]
array += [4, 5, 6]
// array is [0, 1, 2, 3, 4, 5, 6]

// Range
var subscriptableArray = ["zero", "one", "two", "three"]
let subRange = subscriptableArray[1...3]
// subRange = ["one", "two", "three"]  注意subRange是一个数组

subscriptableArray[1...3] = "oneonw" // error

subscriptableArray[1...2] = ["oneone", "twotwo"]
// subscriptableArray is now ["zero", "oneone", "twotwo", "three"]

// 数组遍历---同时取得索引和元素
for (index,item) in enumerate(stringArray){
    println("\(index) - \(item)")
}
</code></pre>

<h3>字典Dictionary</h3>

<p><code>Dictionary&lt;Key: Hashable, Value&gt;</code></p>

<blockquote><p>键可<code>哈希化</code></p></blockquote>

<h4>字典的定义</h4>

<pre><code>var emptyDictionary = Dictionary&lt;String: Int&gt;()
var equivalentEmptyDictionary = [String: Int]()
</code></pre>

<h4>字典的基本运用</h4>

<pre><code>// 更新或添加新值  updateValue(_:forKey:)
var dictionary = ["one": 1, "two": 2, "three": 3]

if let unwrappedPreviousValue = dictionary.updateValue(33, forKey: "three") {
    println("Replaced the previous value: \(unwrappedPreviousValue)")
} else {
    println("Added a new value")
}
// prints "Replaced the previous value: 3"

// 字典遍历
var dictionary = ["one": 1, "two": 2, "three": 3]

for (key,value) in dictionary{
    println("\(key) - \(value)")
}

// 字典键、值 的数组

var keys: LazyBidirectionalCollection&lt;MapCollectionView&lt;[Key : Value], Key&gt;&gt; { get }

let array = Array(dictionary.keys)
// array is ["one", "three", "two"]

var values: LazyBidirectionalCollection&lt;MapCollectionView&lt;[Key : Value], Value&gt;&gt; { get }

let array = Array(dictionary.values)
// array is [1, 3, 2]
</code></pre>

<h2>switch</h2>

<pre><code>let someCharacter: Character = "e"
switch someCharacter {
case "a", "e", "i", "o", "u":
    println("\(someCharacter) is a vowel")
case "b", "c", "d", "f", "g", "h", "j", "k", "l", "m":
    println("\(someCharacter) is a consonant")
default:
    println("\(someCharacter) is not a vowel or a consonant")
}
// prints "e is a vowel"

// Range Matching
let count = 3_000
let countedThings = "stars in the Milky Way"
var naturalCount: String
switch count {
case 100..&lt;1000:
    naturalCount = "hundreds of"
case 1000...999_999:
    naturalCount = "thousands of"
default:
    naturalCount = "millions and millions of"
}
println("There are \(naturalCount) \(countedThings).")
// prints There are thousands of stars in the Milky Way.

// Tuples  下划线忽略部分数值
let somePoint = (1, 1)
switch somePoint {
case (0, 0):
    println("(0, 0) is at the origin")
case (_, 0):
    println("on the x-axis")
case (0, _):
    println("on the y-axis")
case (-2...2, -2...2):  
    println("inside the box")
default:
    println("outside of the box")
}
// prints "inside the box"


// Value Bindings 判断一值，接收一值

let anotherPoint = (2, 0)
switch anotherPoint {
case (let x, 0):
    println("on the x-axis with an x value of \(x)")
case (0, let y):
    println("on the y-axis with a y value of \(y)")
case let (x, y):
    println("somewhere else at (\(x), \(y))")
}
// prints "on the x-axis with an x value of 2"

// where 
let yetAnotherPoint = (1, -1)
switch yetAnotherPoint {
case let (x, y) where x == y:
    println("(\(x), \(y)) is on the line x == y")
case let (x, y) where x == -y:
    println("(\(x), \(y)) is on the line x == -y")
case let (x, y):
    println("(\(x), \(y)) is just some arbitrary point")
}
// prints "(1, -1) is on the line x == -y"


let nickName = "Limon"
switch nickName{
    case let str where str.hasSuffix("on"):
        println("\(str)")
    default:
        println("He is not Limon")
}


// Fallthrough，局限：case条件中不能使用变量
let integerToDescribe = 5
var description = "The number \(integerToDescribe) is"
switch integerToDescribe {
case 2, 3, 5, 7, 11, 13, 17, 19:
    description += " a prime number, and also"
    fallthrough   // 继续往下case
default:
    description += " an integer!"
}
println(description)
// prints "The number 5 is a prime number, and also an integer!"
</code></pre>

<h2>函数 func</h2>

<h3>使用元组让函数返回多个值</h3>

<pre><code>func minMax(array: [Int]) -&gt; (min: Int, max: Int) {
    var currentMin = array[0]
    var currentMax = array[0]
    for value in array[1..&lt;array.count] {

        currentMin = min(currentMin, value)
        currentMax = max(currentMax, value)
    }
    return (currentMin, currentMax)
}
</code></pre>

<h3>内部参数名和外部参数名 Shorthand External Parameter Names</h3>

<pre><code>func containsCharacter(#string: String, #characterToFind: Character) -&gt; Bool {
    for character in string {
        if character == characterToFind {
            return true
        }
    }
    return false
}

containsCharacter(string: "aardvark", characterToFind: "v")
</code></pre>

<h3>参数默认值 Default Parameter Values</h3>

<pre><code>func sayHello(nickName:String, greeting:String = "Hello", other:String = "How are you") -&gt; String{
    let result = greeting + ", " + nickName + "! " + other
    return result
}

sayHello("Limon", other: "How do you do")
</code></pre>

<h3>可变参数 Variadic Parameters</h3>

<pre><code>func add(a:Int, b:Int, others:Int ...)-&gt;Int{
    var result = a + b
    for number in others{
        result += number
    }
    return result
}

add(3, 2)
add(3, 2, 1)
</code></pre>

<blockquote><p>在OC中，定义可变参数的函数需要用<code>va_list _arguments</code></p></blockquote>

<h3>引用参数 In-Out Parameters</h3>

<pre><code>func swapTwoInts(inout a: Int, inout b: Int) {
    let temporaryA = a
    a = b
    b = temporaryA
}

var someInt = 3
var anotherInt = 107
swapTwoInts(&amp;someInt, &amp;anotherInt) // 传引用
println("someInt is now \(someInt), and anotherInt is now \(anotherInt)")
// prints "someInt is now 107, and anotherInt is now 3"
</code></pre>

<h2>闭包 Closures</h2>

<pre><code>let names = ["Chris", "Alex", "Ewa", "Barry", "Daniella"]
var reversed = sorted(names, { (s1: String, s2: String) -&gt; Bool in return s1 &gt; s2 })
reversed = sorted(names, { s1, s2 in return s1 &gt; s2 } ) // 简化
</code></pre>

<h3>Trailing Closures</h3>

<pre><code>let names = ["Chris", "Alex", "Ewa", "Barry", "Daniella"]
let reversed = sorted(names){ (s1: String, s2: String) -&gt; Bool in return s1 &gt; s2 }
</code></pre>

<h2>枚举 Enumerations</h2>

<h3>枚举定义</h3>

<pre><code>enum CompassPoint {
    case North
    case South
    case East
    case West
}

enum Planet {
    case Mercury, Venus, Earth, Mars, Jupiter   }
</code></pre>

<blockquote><p>不像 C 和 Objective-C 一样，Swift 的枚举成员在被创建时不会被赋予一个默认的整数值。在上面
枚举（Enumerations）
枚举语法的 CompassPoints 例子中， North ， South ， East 和 West 不是隐式的等于 0 ， 1 ， 2 和 3，但可定义的时候赋值，如下</p></blockquote>

<pre><code>enum Number:Int {
    case one=1, two, three, four, five
}   

var userInputNumber = 1
if let theNumber = Number(rawValue: userInputNumber) // 相当于解包
{
    switch theNumber{
        case .one:println("the number is 1")
        default: println("no number")
    }
}
</code></pre>

<h3>相关值 Associated Values</h3>

<pre><code>enum Barcode {
    case UPCA(Int, Int, Int)
    case QRCode(String)
}

var productA = Barcode.UPCA(8, 85909_51226, 3)
var productB:Barcode = .QRCode("ABCDEFGHIJKLMNOP")

switch productB {
    case .UPCA(let numberSystem, let identifier, let check):
        println("UPC-A with value of \(numberSystem), \(identifier), \(check).")
    case .QRCode(let productCode):
        println("QR code with value of \(productCode).")
}
// 输出 "QR code with value of ABCDEFGHIJKLMNOP.”
</code></pre>

<h2>Swift基础 &ndash; 类</h2>

<p>在Swift中，不继承于其它类的类，称之为基类。</p>

<pre><code>// 基类
class Vehicle {

}

// 普通类
class Vehicle: NSObject {

}
</code></pre>

<p>类里面可以有：</p>

<pre><code>class Vehicle {
    // propercties 属性
    // methods 方法
    // initializers 初始化器
    // 下标值
    // 调用和访问超类的方法
}
</code></pre>

<h3>储值属性 Stored Properties</h3>

<p>简单来说，一个存储属性就是存储在特定类或结构体的实例里的一个常量或变量</p>

<pre><code>class Vehicle {
    var numberOfWheels = 0 // 无需写setter和getter
}
</code></pre>

<h3>计算属性/算值属性 Computed Properties</h3>

<p>此属性的值并不需要真正地储存起来，此属性可以通过一定地算法得出，如下，计算属性<code>center</code>可以通过储值属性<code>origin</code>来计算得出</p>

<pre><code>struct Point {
    var x = 0.0, y = 0.0
}
struct Rect {
    var origin = Point()
    var center: Point {  // 必须用var
    get {
        let centerX = origin.x + (size.width / 2)
        let centerY = origin.y + (size.height / 2)
        return Point(x: centerX, y: centerY)
    }

}
</code></pre>

<blockquote><p>计算属性不直接存储值，而是提供一个 getter 来获取值，一个可
选的 setter 来间接设置其他属性或变量的值，若无setter则为只读计算属性。必须使用 var 关键字定义计算属性，包括只读计算属性，因为它们的值不是固定的****</p></blockquote>

<h3>属性的默认值</h3>

<pre><code>class Vehicle {
    var numberOfWheels = 0
    var number?
    var title:String! // 隐式拆包的Optional 

    var num  // error
}
</code></pre>

<p>只能有这两种写法，一种是<code>Optional 可选型</code>、还有就是赋予默认值。如果不给默认值，默认是<code>nil</code>，但在Swift中，只有<code>Optional 可选型</code> 才能被赋予为<code>nil</code></p>

<h3>初始化方法</h3>

<p>必须记住两个个原则：</p>

<ul>
<li><strong>每个值在使用之前都必须进行初始化</strong></li>
<li><code>初始化方法</code>应该将一个实例彻底初始化</li>
</ul>


<p>子类初始化</p>

<pre><code>class Bicycle: Vehicle{
    init(){
        super.init() // 不一定要调用
        numberOfWheels = 2
    }
}
</code></pre>

<p>OC中的init充当着两个角色：</p>

<ul>
<li>初始化操作</li>
<li>调用<code>[super init]</code>，获得self</li>
</ul>


<p>在Swift中的<code>init</code>只负责初始化</p>

<h3>计算属性覆盖 Overriding a Property</h3>

<pre><code>class Car: Vehicle{
    var speed = 0.0
    init(){
        numberOfWheels = 4
    }

    override var description:String{
        return super.description + ", 每小时\(speed)公里"
    }
}
</code></pre>

<p><code>override</code>作用：</p>

<ul>
<li>告诉自己是在覆写父类的属性</li>
<li>override 关键字会提醒 Swift 编译器去检查该类的超类（或其中一个父类）是否有匹配重写版本的声明。

<blockquote><p>任何缺少 override 关键字的重写都会
在编译时被诊断为错误。</p></blockquote></li>
</ul>


<h3>属性观察 Property Observers</h3>

<p>属性观察器监控和响应属性值的变化，每次属性被设置值的时候都会调用属性观察器，甚至新的值和现在的值相同的时候也不例外。</p>

<blockquote><p>不需要为无法重载的<strong>计算属性</strong>添加属性观察器，因为可以通过 setter 直接监控和响应值的变化</p></blockquote>

<p>可以为属性添加如下的一个或全部观察器：</p>

<ul>
<li><code>willSet</code>在设置新的值之前调用</li>
<li><code>didSet</code>在新的值被设置之后立即调用</li>
</ul>


<blockquote><p>willSet和didSet观察器在属性初始化过程中不会被调用，它们只会当属性的值在初始化之外的地方被设置时被调用</p></blockquote>

<p>在子类中</p>

<pre><code>class ParentsCar: Car{
    override var speed: Double{
        willSet{
        }
        didSet{

        }

    }

}
</code></pre>

<p>在本类中：</p>

<pre><code>class StepCounter {
    var totalSteps: Int = 0 {
    willSet(newTotalSteps) {
        println("About to set totalSteps to \(newTotalSteps)")
    }
    didSet {
        if totalSteps &gt; oldValue  {
            println("Added \(totalSteps - oldValue) steps")
        }
    }
    }
}
let stepCounter = StepCounter()
stepCounter.totalSteps = 200
// About to set totalSteps to 200
// Added 200 steps
</code></pre>

<h2>官方文档</h2>

<p><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097-CH3-ID0">The Swift Programming Language</a>  &mdash;&ndash; Swift官方文档</p>

<p><a href="https://developer.apple.com/library/ios/documentation/General/Reference/SwiftStandardLibraryReference/index.html#//apple_ref/doc/uid/TP40014608-CH7-SW1">Swift Standard Library Reference</a>  &mdash;&ndash; 基础类型的文档</p>

<h2>Cheat Sheet</h2>

<p><a href="http://cdn1.raywenderlich.com/wp-content/uploads/2014/06/RW-Swift-Cheatsheet-0_5.pdf">Swift Cheat Sheet and Quick Reference</a></p>

<p><a href="http://mhm5000.gitbooks.io/swift-cheat-sheet/content/index.html">Swift Cheat Sheet</a></p>

<p><a href="https://github.com/iwasrobbed/Swift-CheatSheet#swift-cheat-sheet">Swift-CheatSheet</a></p>

<p><a href="http://kpbp.github.io/swiftcheatsheet/#variables">Swift Cheat Sheet</a></p>

<h2>74个Swift内置函数</h2>

<h3>断言 assert</h3>

<p>断言，参数如果为<code>true</code>则继续，否则抛出异常</p>

<pre><code>let age = -3
assert(age &gt;= 0, "A person's age cannot be less than zero")
// 因为 age &lt; 0，所以断言会触发
</code></pre>

<h5>断言数组越界</h5>

<pre><code>struct Matrix {
    let rows: Int, columns: Int
    var grid: [Double]
    init(rows: Int, columns: Int) {
        self.rows = rows
        self.columns = columns
        grid = Array(count: rows * columns, repeatedValue: 0.0)
    }
    func indexIsValidForRow(row: Int, column: Int) -&gt; Bool {
        return row &gt;= 0 &amp;&amp; row &lt; rows &amp;&amp; column &gt;= 0 &amp;&amp; column &lt; columns
    }
    subscript(row: Int, column: Int) -&gt; Double {
        get {
            // 断言，防止数组越界
            assert(indexIsValidForRow(row, column: column), "Index out of range")
            return grid[(row * columns) + column]
        }
        set {
            assert(indexIsValidForRow(row, column: column), "Index out of range")
            grid[(row * columns) + column] = newValue
        }
    }
}
</code></pre>

<h3>计算元素个数 countElements</h3>

<pre><code>countElements("foo") == 3
</code></pre>

<h3>数组的遍历 同时获得index和value</h3>

<pre><code>for (index, value) in enumerate(["A", "B"]) {
    // "0:A", "1:B" will be printed
    println("\(index):\(value)")
}
</code></pre>

<h3>数值比较 min</h3>

<pre><code>min(8, 2, 3) == 2
max(8, 2) == 8
</code></pre>

<h3>寻找序列中的最大值</h3>

<pre><code>maxElement(1...10) == 10
var languages = ["Swift", "Objective-C"]
maxElement(languages) == "Swift"

minElement(1...10) == 1
</code></pre>

<h3>打印（带换行）println</h3>

<pre><code>println("World")
</code></pre>

<h3>打印出某个对象object的所有信息</h3>

<pre><code>var languages = ["Swift", "Objective-C"]
dump(languages)
// Prints:
// ▿ 2 elements
//   - [0]: Swift
//   - [1]: Objective-C
</code></pre>

<h3>排序 sort</h3>

<pre><code>// sort mentioned on page 14
for i in sort(["B", "A"]) {
    // "A", "B" will be printed
    println(i)
}
</code></pre>

<h3>返回数字的绝对值 abs</h3>

<pre><code>abs(-1) == 1
abs(-42) == 42
abs(42) == 42
</code></pre>

<h3>判断是否包含指定元素 contains</h3>

<pre><code>`-contains(sequence, element)`

var languages = ["Swift", "Objective-C"]
contains(languages, "Swift") == true
contains(languages, "Java") == false
contains([29, 85, 42, 96, 75], 42) == true
</code></pre>

<h3>去掉首元素 dropFirst</h3>

<pre><code>var languages = ["Swift", "Objective-C"]
var oldLanguages = dropFirst(languages)
equal(oldLanguages, ["Objective-C"]) == true
</code></pre>

<h3>去掉最后一个元素 dropLast</h3>

<pre><code>var languages = ["Swift", "Objective-C"]
var newLanguages = dropLast(languages)
equal(newLanguages, ["Swift"]) == true
</code></pre>

<h3>判断两个序列是否相等</h3>

<pre><code>var languages = ["Swift", "Objective-C"]
equal(languages, ["Swift", "Objective-C"]) == true
</code></pre>

<h3>部分相等</h3>

<p><code>-startsWith(sequence1, sequence2)</code>：如果序列sequence1中开头的元素跟序列sequence2中的所有元素都相等，则返回true，否则返回false。</p>

<pre><code>startsWith("foobar", "foo") == true
startsWith(10..100, 10..15) == true
var languages = ["Swift", "Objective-C"]
startsWith(languages, ["Swift"]) == true
</code></pre>

<h3>过滤 filter</h3>

<p><code>-filter(sequence, includeElementClosure)</code>对序列sequence中每个元素都执行includeElementClosure闭包，并将所有闭包结果为true的元素合成一个新序列sequence并返回。</p>

<pre><code>for i in filter(1...100, { $0 % 10 == 0 }) {
    // 10, 20, 30, ...
    println(i)
    assert(contains([10, 20, 30, 40, 50, 60, 70, 80, 90, 100], i))
}
</code></pre>

<h3>map</h3>

<p><code>-map(sequence, transformClosure)</code>：对序列sequence中每个元素都执行includeElementClosure闭包，并将所有闭包的结果合成一个新序列sequence并返回</p>

<pre><code>equal(map(1...3, { $0 * 5 }), [5, 10, 15])
for i in map(1...10, { $0 * 10 }) {
    // 10, 20, 30, ...
    println(i)
    assert(contains([10, 20, 30, 40, 50, 60, 70, 80, 90, 100], i))
}
</code></pre>

<blockquote><p>与filter不同，与ReactiveCocoa中的map类似</p></blockquote>

<h3>reduce</h3>

<p><code>-reduce(sequence, initial, combineClosure)</code>：给定一个序列sequence，以及一个初始值initial，然后将initial和序列里的第1个元素作为参数传入combineClosure中进行运算，得到的结果保存到initial；然后再将initial和第2个元素传入combineClosure中计算，结果保存到initial；重复计算直到所有sequence中的元素都计算完毕，并返回最终的initial值。</p>

<pre><code>var languages = ["Swift", "Objective-C"]
reduce(languages, "", { $0 + $1 }) == "SwiftObjective-C"
reduce([10, 20, 5], 2, { $0 * $1 }) == 2000 
</code></pre>

<h3>寻找元素，获取index find</h3>

<p><code>-find(sequence, element)：</code>若有则返回index，若无则返回nil</p>

<pre><code>var languages = ["Swift", "Objective-C"]
find(languages, "Objective-C") == 1
find(languages, "Java") == nil
find([29, 85, 42, 96, 75], 42) == 2 
</code></pre>

<blockquote><p>注意<code>-find</code>返回的是nil或index</p></blockquote>

<h3>数组转字符串 join</h3>

<pre><code>join(":", ["A", "B", "C"]) == "A:B:C"
var languages = ["Swift", "Objective-C"]
join("/", languages) == "Swift/Objective-C"
</code></pre>

<h3>逆序 reverse</h3>

<pre><code>equal(reverse([1, 2, 3]), [3, 2, 1])
for i in reverse([1, 2, 3]) {
    // 3, 2, 1
    println(i)
}
</code></pre>

<h2>完整74个内置函数：</h2>

<pre><code>abs(...)
advance(...)
alignof(...)
alignofValue(...)
assert(...)
bridgeFromObjectiveC(...)
bridgeFromObjectiveCUnconditional(...)
bridgeToObjectiveC(...)
bridgeToObjectiveCUnconditional(...)
c_malloc_size(...)
c_memcpy(...)
c_putchar(...)
contains(...)
count(...)
countElements(...)
countLeadingZeros(...)
debugPrint(...)
debugPrintln(...)
distance(...)
dropFirst(...)
dropLast(...)
dump(...)
encodeBitsAsWords(...)
enumerate(...)
equal(...)
filter(...)
find(...)
getBridgedObjectiveCType(...)
getVaList(...)
indices(...)
insertionSort(...)
isBridgedToObjectiveC(...)
isBridgedVerbatimToObjectiveC(...)
isUniquelyReferenced(...)
join(...)
lexicographicalCompare(...)
map(...)
max(...)
maxElement(...)
min(...)
minElement(...)
numericCast(...)
partition(...)
posix_read(...)
posix_write(...)
print(...)
println(...)
quickSort(...)
reduce(...)
reflect(...)
reinterpretCast(...)
reverse(...)
roundUpToAlignment(...)
sizeof(...)
sizeofValue(...)
sort(...)
split(...)
startsWith(...)
strideof(...)
strideofValue(...)
swap(...)
swift_MagicMirrorData_summaryImpl(...)
swift_bufferAllocate(...)
swift_keepAlive(...)
toString(...)
transcode(...)
underestimateCount(...)
unsafeReflect(...)
withExtendedLifetime(...)
withObjectAtPlusZero(...)
withUnsafePointer(...)
withUnsafePointerToObject(...)
withUnsafePointers(...)
withVaList(...)
</code></pre>

<h2>优秀文章</h2>

<p><a href="http://swiftist.org/topics/126">74个Swift标准库函数</a></p>

<p><a href="http://practicalswift.com/2014/06/14/the-swift-standard-library-list-of-built-in-functions/">Swift Standard Library: Documented and undocumented built-in functions in the Swift standard library – the complete list with all 74 functions</a></p>
]]></content>
  </entry>
  
</feed>
